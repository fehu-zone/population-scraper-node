process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
import dotenv from "dotenv";
import { fetchCountryDataDynamic } from "./scraper/countryDataDynamic.js";
import { fetchWorldDataDynamic } from "./scraper/worldDataDynamic.js";
import { initIndex, markCurrentSnapshot, client } from "./elastic/client.js";

dotenv.config();

// Geli≈ümi≈ü Loglama Sistemi
const logger = {
  info: (message) =>
    console.log(
      `\x1b[36m‚ÑπÔ∏è [${new Date().toLocaleTimeString()}] ${message}\x1b[0m`
    ),
  success: (message) =>
    console.log(
      `\x1b[32m‚úÖ [${new Date().toLocaleTimeString()}] ${message}\x1b[0m`
    ),
  error: (message) =>
    console.log(
      `\x1b[31m‚ùå [${new Date().toLocaleTimeString()}] ${message}\x1b[0m`
    ),
  warn: (message) =>
    console.log(
      `\x1b[33m‚ö†Ô∏è [${new Date().toLocaleTimeString()}] ${message}\x1b[0m`
    ),
};

// Veri Doƒürulama
const validateData = (worldData, countryData) => {
  const errors = [];
  const EXPECTED_COUNTRIES = 235;

  // D√ºnya verisi kontrolleri
  const worldPopulationThreshold = 7_900_000_000; // G√ºncel d√ºnya n√ºfus e≈üiƒüi
  if (
    !worldData?.current_population ||
    worldData.current_population < worldPopulationThreshold
  ) {
    errors.push(
      `Ge√ßersiz d√ºnya n√ºfusu: ${
        worldData?.current_population?.toLocaleString() || "bilinmiyor"
      }`
    );
  }

  // √úlke verisi kontrolleri
  if (!countryData?.length) {
    errors.push("Hi√ß √ºlke verisi alƒ±namadƒ±");
  } else {
    const missingCount = EXPECTED_COUNTRIES - countryData.length;
    if (missingCount > 0) errors.push(`Eksik √ºlke: ${missingCount}`);

    // Kritik √ºlke kontrolleri
    const criticalCountries = ["China", "India", "United States"];
    const missingCritical = criticalCountries.filter(
      (c) => !countryData.some((d) => d.country === c)
    );
    if (missingCritical.length)
      errors.push(`Eksik kritik √ºlkeler: ${missingCritical.join(", ")}`);

    // Veri kalite kontrol√º
    const invalidEntries = countryData.filter(
      (c) =>
        c.current_population <= 0 || isNaN(c.yearly_change) || isNaN(c.med_age)
    ).length;
    if (invalidEntries > 5)
      errors.push(`${invalidEntries} ge√ßersiz veri i√ßeren √ºlke`);
  }

  return { isValid: !errors.length, errors };
};

// Ana ƒ∞≈ülem Akƒ±≈üƒ±
const processData = async () => {
  try {
    logger.info("Scraping s√ºreci ba≈ülatƒ±lƒ±yor...");

    // Elasticsearch hazƒ±rlƒ±ƒüƒ±
    await initIndex();

    // Paralel veri √ßekme
    const [worldData, countryData] = await Promise.allSettled([
      fetchWorldDataDynamic(),
      fetchCountryDataDynamic(),
    ]);

    // Hata y√∂netimi
    const results = {
      world: worldData.status === "fulfilled" ? worldData.value : null,
      country: countryData.status === "fulfilled" ? countryData.value : [],
    };

    logger.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê D√úNYA VERƒ∞LERƒ∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    if (results.world) {
      logger.info(
        `üåç Toplam N√ºfus: ${results.world.current_population?.toLocaleString()}`
      );
      logger.info(
        `üë∂ Bug√ºnk√º Doƒüum: ${results.world.births_today?.toLocaleString()}`
      );
      logger.info(
        `‚ò†Ô∏è Bug√ºnk√º √ñl√ºm: ${results.world.deaths_today?.toLocaleString()}`
      );
      logger.info(
        `üìà Net B√ºy√ºme: ${results.world.population_growth?.toLocaleString()}`
      );
      logger.info(
        `üìÖ Yƒ±llƒ±k Doƒüum: ${(
          results.world.births_today * 365
        ).toLocaleString()}`
      );
      logger.info(`‚è≥ Zaman Damgasƒ±: ${results.world["@timestamp"]}`);
    } else {
      logger.error("D√ºnya verisi alƒ±namadƒ±!");
    }
    logger.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");

    logger.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê √úLKE VERƒ∞LERƒ∞ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    if (results.country.length > 0) {
      logger.info(`‚úÖ ${results.country.length} √ºlke verisi alƒ±ndƒ±`);
      logger.info(
        `üèÜ ƒ∞lk 3 √úlke: ${results.country
          .slice(0, 3)
          .map((c) => c.country)
          .join(", ")}`
      );
      logger.info(
        `üìä Ortalama Ya≈ü: ${(
          results.country.reduce((sum, c) => sum + (c.med_age || 0), 0) /
          results.country.length
        ).toFixed(1)}`
      );
    } else {
      logger.error("‚õî Hi√ß √ºlke verisi alƒ±namadƒ±!");
    }

    // Validasyon
    const validation = validateData(results.world, results.country);
    if (!validation.isValid) {
      throw new Error(`Validasyon Hatasƒ±:\n${validation.errors.join("\n")}`);
    }

    // Elasticsearch'e yazma
    const bulkBody = results.country.flatMap((country) => [
      { index: { _index: process.env.INDEX_NAME } },
      {
        ...country,
        type: "country",
        is_current: true,
        "@timestamp": new Date().toISOString(),
      },
    ]);

    if (results.world) {
      bulkBody.unshift(
        { index: { _index: process.env.INDEX_NAME } },
        { ...results.world, type: "world", is_current: true }
      );
    }

    const { body: response } = await client.bulk({
      refresh: "wait_for",
      body: bulkBody,
    });

    // Hata analizi
    if (response.errors) {
      logger.warn(
        `Hatalƒ± dok√ºmanlar: ${
          response.items.filter((i) => i.index.error).length
        }`
      );
      response.items.slice(0, 3).forEach(({ index }) => {
        if (index.error) logger.error(`Hata: ${index.error.reason}`);
      });
    }

    logger.success(`Ba≈üarƒ±yla kaydedildi: ${response.items.length} kayƒ±t`);
  } catch (error) {
    logger.error(`Kritik Hata: ${error.message}`);
    logger.info("5 dakika sonra yeniden denenecek...");
    setTimeout(processData, 300_000);
  }
};

// Uygulama ba≈ülatma
console.clear();
processData();
setInterval(processData, 1_800_000);
